// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String?  
  content         String?

  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int

  parentPostId    Int?
  parentPost      Post?     @relation("PostRepost", fields: [parentPostId], references: [id])
  reposts         Post[]    @relation("PostRepost")

  hashTags        HashTag[]
  comments        Comment[]

  postLikedFrom User[]    @relation(name: "likedPosts")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  provider        Int       @default(1)

  imageUrl        String?   
  userName        String?   
  lastName        String?   
  firstName       String?  
  hashedPassword  String?   

  posts           Post[]
  likedPosts      Post[]    @relation(name: "likedPosts")
  friends         User[]    @relation("UserFollows", references: [id])
  followers       User[]    @relation("UserFollows", references: [id])

  comments        Comment[]
  commentLikes    Comment[] @relation(name: "commentLikes")
  notifications   Notification[]

}

model Comment {
  id                Int       @id @default(autoincrement())
  content           String    

  author            User      @relation(fields: [authorId], references: [id])
  authorId          Int
  likesFrom         User[]    @relation(name: "commentLikes")

  post              Post      @relation(fields: [postId], references: [id])
  postId            Int

  parentCommentId   Int?
  parentComment     Comment?  @relation("ReplyComments", fields: [parentCommentId], references: [id])
  replies           Comment[] @relation("ReplyComments")

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model HashTag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  posts Post[]
}

model Notification {
  id       Int     @id @default(autoincrement())
  message  String  
  seen     Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
}
